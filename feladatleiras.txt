• Készítsünk egy barkóba alkalmazást. A szerver legyen képes kiszolgálni
több klienst. A szerver válasszon egy egész számot 1..100 között
véletlenszerűen. A kliensek próbálják kitalálni a számot.

• A kliens üzenete egy összehasonlító operátor: <, >, = és egy egész szám,
melyek jelentése: kisebb-e, nagyobb-e, mint az egész szám, illetve
rákérdez a számra. A kérdésekre a szerver Igen/Nem/Nyertél/Kiestél/Vége
üzenetekkel tud válaszolni. A Nyertél és Kiestél válaszok csak a rákérdezés
(=) esetén lehetségesek.

• Ha egy kliens kitalálta a számot, akkor a szerver minden újabb kliens
üzenetre az „Vége” üzenetet küldi, amire a kliensek kilépnek. A szerver
addig nem választ új számot, amíg minden kliens ki nem lépett.

• • Nyertél, Kiestél és Vége üzenet fogadása esetén a kliens bontja a
kapcsolatot és terminál. Igen/Nem esetén folytatja a kérdezgetést.
• A kommunikációhoz TCP-t használjunk!

• A kliens logaritmikus keresés segítségével találja ki a gondolt számot. A
kliens tudja, hogy milyen intervallumból választott a szerver.
• AZAZ a kliens NE a standard inputról dolgozzon.
• Minden kérdés küldése előtt véletlenszerűen várjon 1-5 mp-et. Ezzel több
kliens tesztelése is lehetséges lesz.

• Üzenet formátum:
– Klienstől: bináris formában egy db karakter, 32 bites egész szám
A karakter lehet: <: kisebb-e, >: nagyobb-e, =: egyenlő-e
– Szervertől: ugyanaz a bináris formátum, de a számnak nincs szerepe (bármi
lehet)
A karakter lehet: I: Igen, N: Nem, K: Kiestél, Y: Nyertél, V: Vége
• Fájlnevek és parancssori argumentumok:
• Szerver: server.py <bind_address> <bind_port> # A bindolás során
használt pár
• Kliens: client.py <server_address> <server_port> # A szerver elérhetősége